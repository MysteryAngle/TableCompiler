{#-
 # ==============================================================================
 # TableCompiler Template
 # Copyright (c) 2025, Alex Liao. All rights reserved.
 #
 # This template is part of the TableCompiler project.
 # ==============================================================================
-#}

// ==============================================================================
//  templates/java_class.java.j2
//  用于生成标准表中的数据类，或可复用的自定义类型类。
// ==============================================================================
package {{ package_name }};

import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * {{ struct_comment }}
 */
public class {{ class_name }} {
    {% for field in fields %}
    /**
     * {{ field.comment }}
     */
    private {{ field.type }} {{ field.name }};
    {% endfor %}

    /**
     * Populates the object with data from a binary stream.
     * @param reader The DataInputStream to read data from.
     * @throws IOException if an I/O error occurs.
     */
    public void read(DataInputStream reader) throws IOException {
        {%- for field in fields %}
        {%- if field.read_info.is_list %}
        int count_{{ field.name }} = reader.readInt();
        List<{{ field.read_info.list_item.type }}> list_{{ field.name }} = new ArrayList<>(count_{{ field.name }});
        for (int i = 0; i < count_{{ field.name }}; i++) {
            {{ field.read_info.list_item.type }} listItem;
            {%- if field.read_info.list_item.is_complex %}
            listItem = new {{ field.read_info.list_item.type }}();
            listItem.read(reader);
            {%- elif field.read_info.list_item.is_enum %}
            listItem = {{ field.read_info.list_item.type }}.fromValue(reader.readInt());
            {%- else %}
            listItem = reader.{{ field.read_info.list_item.read_method }};
            {%- endif %}
            list_{{ field.name }}.add(listItem);
        }
        this.{{ field.name }} = list_{{ field.name }};
        {%- elif field.read_info.is_complex %}
        this.{{ field.name }} = new {{ field.type }}();
        this.{{ field.name }}.read(reader);
        {%- elif field.read_info.is_enum %}
        this.{{ field.name }} = {{ field.type }}.fromValue(reader.readInt());
        {%- else %}
        this.{{ field.name }} = reader.{{ field.read_info.read_method }};
        {%- endif %}
        {% endfor %}
    }

    {% for field in fields %}
    /**
     * @return {{ field.comment }}
     */
    public {{ field.type }} get{{ field.pascal_name }}() {
        return this.{{ field.name }};
    }
    {% endfor %}
}